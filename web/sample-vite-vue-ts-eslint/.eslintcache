[{"/mnt/d/github/onework-sample/web/sample-vite-vue-ts-eslint/src/App.vue":"1","/mnt/d/github/onework-sample/web/sample-vite-vue-ts-eslint/src/components/HelloWorld.vue":"2","/mnt/d/github/onework-sample/web/sample-vite-vue-ts-eslint/src/env.d.ts":"3","/mnt/d/github/onework-sample/web/sample-vite-vue-ts-eslint/src/main.ts":"4"},{"size":563,"mtime":1653014286284,"results":"5","hashOfConfig":"6"},{"size":956,"mtime":1653016032309,"results":"7","hashOfConfig":"6"},{"size":281,"mtime":1653009877926,"results":"8","hashOfConfig":"6"},{"size":90,"mtime":1653009877931,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1aosv0l",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/d/github/onework-sample/web/sample-vite-vue-ts-eslint/src/App.vue",[],[],"/mnt/d/github/onework-sample/web/sample-vite-vue-ts-eslint/src/components/HelloWorld.vue",[],[],"/mnt/d/github/onework-sample/web/sample-vite-vue-ts-eslint/src/env.d.ts",[],["22","23","24"],"/mnt/d/github/onework-sample/web/sample-vite-vue-ts-eslint/src/main.ts",[],[],{"ruleId":"25","severity":2,"message":"26","line":6,"column":36,"nodeType":"27","messageId":"28","endLine":6,"endColumn":38,"suppressions":"29"},{"ruleId":"25","severity":2,"message":"26","line":6,"column":40,"nodeType":"27","messageId":"28","endLine":6,"endColumn":42,"suppressions":"30"},{"ruleId":"31","severity":1,"message":"32","line":6,"column":44,"nodeType":"33","messageId":"34","endLine":6,"endColumn":47,"suggestions":"35","suppressions":"36"},"@typescript-eslint/ban-types","Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.\n- If you want a type meaning \"empty object\", you probably want `Record<string, never>` instead.","TSTypeLiteral","bannedTypeMessage",["37"],["38"],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["39","40"],["41"],{"kind":"42","justification":"43"},{"kind":"42","justification":"43"},{"messageId":"44","fix":"45","desc":"46"},{"messageId":"47","fix":"48","desc":"49"},{"kind":"42","justification":"43"},"directive","","suggestUnknown",{"range":"50","text":"51"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"50","text":"52"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[247,250],"unknown","never"]